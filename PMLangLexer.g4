lexer grammar PMLangLexer;

options {
    superClass=PMLangLexerBase;
}

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
MATRIX : 'matrix' | 'ùïÑ' | HASH ; // –ú–∞—Ç—Ä–∏—Ü–∞ (ùïÑ ‚Äî U+1D540)

INT            : 'int'    | '‚à´'  ; // –ò–Ω—Ç–µ–≥—Ä–∞–ª
NSUM           : 'nsum'   | '‚àë'  ; // –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
PROD           : 'prod'   | '‚àè'  ; // –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
DIFF           : 'diff'   | '‚àÇ'  ; // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª
TENSOR         : 'tensor' | 'ùïã'  ; // –¢–µ–Ω–∑–æ—Ä (ùïã ‚Äî U+1D54B)
GRAD           : 'grad'   | '‚àá'  ; // –ì—Ä–∞–¥–∏–µ–Ω—Ç
DIV            : 'div'    | '‚àá¬∑' ; // –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
CURL           : 'curl'   | '‚àá√ó' ; // –†–æ—Ç–æ—Ä
LAPLACE        : 'laplace'| '‚àÜ'  ; // –õ–∞–ø–ª–∞—Å–∏–∞–Ω
SCALAR_PRODUCT : 'sp'     | '¬∑'  ; // –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
VECTOR_PRODUCT : 'vp'     | '√ó'  ; // –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

LIM      : 'lim'      ; // –ü—Ä–µ–¥–µ–ª
VEC      : 'vec'      ; // –í–µ–∫—Ç–æ—Ä
CONSTR   : 'constr'   ; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
SYS      : 'sys'      ; // –°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
FIELD    : 'field'    ; // –°–∫–∞–ª—è—Ä–Ω—ã–µ/–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø–æ–ª—è
MEAN     : 'mean'     ; // –°—Ä–µ–¥–Ω–µ–µ
VAR      : 'var'      ; // –î–∏—Å–ø–µ—Ä—Å–∏—è
STD      : 'std'      ; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
GRAPH    : 'graph'    ; // –ì—Ä–∞—Ñ—ã
SIMPLIFY : 'simplify' ; // –£–ø—Ä–æ—â–µ–Ω–∏–µ
EXPAND   : 'expand'   ; // –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ
FACTOR   : 'factor'   ; // –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
SOLVE    : 'solve'    ; // –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
TRANSPOSE: 'transpose'; // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
INV      : 'inv'      ; // –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
DET      : 'det'      ; // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
RANGE    : 'range' | 'r'  ;
INCLUDE  : 'include'  ;
EXCLUDE  : 'exclude'  ;
STEP     : 'step'     ;


// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
PLUS       : '+' ;
MINUS      : '-' ;
STAR       : '*' ;
SLASH      : '/' ;
CARET      : '^' ;
EQUAL      : '=' ;
COMMA      : ',' ;
DOT        : '.' ;
LPAR       : '(' ;
RPAR       : ')' ;
LSQB       : '[' ;
RSQB       : ']' ;
LBRACE     : '{' ;
RBRACE     : '}' ;
VBAR       : '|' ;
DOUBLE_VBAR : '||';
HASH       : '#' ;

ARROW_RIGHT : '->'  ;
ARROW_LEFT  : '<-'  ;
FROM        : 'from';
TO          : 'to'  ;


// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
fragment CONST_PI    : 'pi'    | 'œÄ'; // –ß–∏—Å–ª–æ œÄ
fragment CONST_E     : 'e';                      // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞
fragment CONST_PHI   : 'phi'   | 'œÜ'; // –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ
fragment CONST_INF   : 'inf'   | '‚àû'; // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
fragment CONST_DELTA : 'delta' | 'Œ¥'; // –§—É–Ω–∫—Ü–∏—è –î–∏—Ä–∞–∫–∞
fragment CONST_C     : 'c';                      // –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞
fragment CONST_HBAR  : 'hbar'  | '‚Ñè'; // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ü–ª–∞–Ω–∫–∞
fragment CONST_G     : 'G';                      // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
fragment CONST_N_A   : 'N_A';                    // –ß–∏—Å–ª–æ –ê–≤–æ–≥–∞–¥—Ä–æ
fragment CONST_I     : 'i'                     ; // –ú–Ω–∏–º–∞—è –µ–¥–∏–Ω–∏—Ü–∞
fragment CONST_R_GAS : 'R_gas';                  // –ì–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è


CONSTANTS
    : CONST_PI
    | CONST_E
    | CONST_PHI
    | CONST_INF
    | CONST_DELTA
    | CONST_C
    | CONST_HBAR
    | CONST_G
    | CONST_N_A
    | CONST_I
    | CONST_R_GAS
    ;

NUMBER // –ß–∏—Å–ª–∞
    : INTEGER
    | FLOAT_NUMBER
    | IMAGINARY_NUMBER
    ;

STRING // –°—Ç—Ä–æ–∫–∏
    : '\'' ~['\r\n]* '\''
    | '"'  ~['\r\n]*  '"'
    ;

IDENTIFIER : [a-zA-Z][a-zA-Z0-9]*; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã(–∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π)

// –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
WS       : [ \t\r\n]+ -> channel(HIDDEN);
COMMENT  : HASH ~[\r\n]* -> channel(HIDDEN);

// –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
ERRORTOKEN : . ; // PMLangLexerBase –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏

// –§—Ä–∞–≥–º–µ–Ω—Ç—ã
fragment INTEGER          : '0' | MINUS? [1-9][0-9]*            ; // –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
fragment FLOAT_NUMBER     : INTEGER? DOT [0-9]+          ; // –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
fragment IMAGINARY_NUMBER : (INTEGER | FLOAT_NUMBER) 'i' ; // –ú–Ω–∏–º—ã–µ —á–∏—Å–ª–∞
