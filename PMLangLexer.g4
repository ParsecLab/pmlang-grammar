lexer grammar PMLangLexer;

options {
    superClass=PMLangLexerBase;
}

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
MATRIX : 'matrix' | '\uD835\uDD40' | 'ùïÑ' | HASH ; // –ú–∞—Ç—Ä–∏—Ü–∞ (ùïÑ ‚Äî U+1D540)

INT            : 'int'    | '\u222B'       | '‚à´'  ; // –ò–Ω—Ç–µ–≥—Ä–∞–ª
NSUM           : 'nsum'   | '\u2211'       | '‚àë'  ; // –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
PROD           : 'prod'   | '\u220F'       | '‚àè'  ; // –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
DIFF           : 'diff'   | '\u2202'       | '‚àÇ'  ; // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª
TENSOR         : 'tensor' | '\uD835\uDD4B' | 'ùïã'  ; // –¢–µ–Ω–∑–æ—Ä (ùïã ‚Äî U+1D54B)
GRAD           : 'grad'   | '\u2207'       | '‚àá'  ; // –ì—Ä–∞–¥–∏–µ–Ω—Ç
DIV            : 'div'    | '\u2207\u002E' | '‚àá¬∑' ; // –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
CURL           : 'curl'   | '\u2207\u00D7' | '‚àá√ó' ; // –†–æ—Ç–æ—Ä
LAPLACE        : 'laplace'| '\u2206'       | '‚àÜ'  ; // –õ–∞–ø–ª–∞—Å–∏–∞–Ω
SCALAR_PRODUCT : 'sp'     | '\u00B7'       | '¬∑'  ; // –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
VECTOR_PRODUCT : 'vp'     | '\u00D7'       | '√ó'  ; // –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

LIM      : 'lim'      ; // –ü—Ä–µ–¥–µ–ª
VEC      : 'vec'      ; // –í–µ–∫—Ç–æ—Ä
CONSTR   : 'constr'   ; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
SYS      : 'sys'      ; // –°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
FIELD    : 'field'    ; // –°–∫–∞–ª—è—Ä–Ω—ã–µ/–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø–æ–ª—è
MEAN     : 'mean'     ; // –°—Ä–µ–¥–Ω–µ–µ
VAR      : 'var'      ; // –î–∏—Å–ø–µ—Ä—Å–∏—è
STD      : 'std'      ; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
GRAPH    : 'graph'    ; // –ì—Ä–∞—Ñ—ã
SIMPLIFY : 'simplify' ; // –£–ø—Ä–æ—â–µ–Ω–∏–µ
EXPAND   : 'expand'   ; // –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ
FACTOR   : 'factor'   ; // –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
SOLVE    : 'solve'    ; // –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
TRANSPOSE: 'transpose'; // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
INV      : 'inv'      ; // –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
DET      : 'det'      ; // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
RANGE    : 'R'        ;
INCLUDE  : 'include'  ;
EXCLUDE  : 'exclude'  ;
STEP     : 'step'     ;


// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
PLUS       : '+' ;
MINUS      : '-' ;
STAR       : '*' ;
SLASH      : '/' ;
CARET      : '^' ;
EQUAL      : '=' ;
COMMA      : ',' ;
DOT        : '.' ;
LPAR       : '(' ;
RPAR       : ')' ;
LSQB       : '[' ;
RSQB       : ']' ;
LBRACE     : '{' ;
RBRACE     : '}' ;
VBAR       : '|' ;
DOUBLEVBAR : '||';
HASH       : '#' ;

ARROW_RIGHT : '->'  ;
ARROW_LEFT  : '<-'  ;
FROM        : 'from';
TO          : 'to'  ;


// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONST_PI : 'pi'  | '\u03C0' | 'œÄ' ; // –ß–∏—Å–ª–æ œÄ
CONST_E  : 'e'                    ; // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–æ—Ä–∏—Ñ–º–∞
CONST_PHI: 'phi' | '\u03C6' | 'œÜ' ; // –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ


NUMBER // –ß–∏—Å–ª–∞
    : INTEGER
    | FLOAT_NUMBER
    | IMAGINARY_NUMBER
    ;

STRING // –°—Ç—Ä–æ–∫–∏
    : '\'' ~['\r\n]* '\''
    | '"'  ~['\r\n]*  '"'
    ;

IDENTIFIER : [a-zA-Z][a-zA-Z0-9]*; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã(–∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π)

// –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
WS       : [ \t\r\n]+ -> channel(HIDDEN);
COMMENT  : HASH ~[\r\n]* -> channel(HIDDEN);

// –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
ERRORTOKEN : . ; // PMLangLexerBase –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏

// –§—Ä–∞–≥–º–µ–Ω—Ç—ã
fragment INTEGER          : '0' | [1-9][0-9]*            ; // –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
fragment FLOAT_NUMBER     : INTEGER? DOT [0-9]+          ; // –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
fragment IMAGINARY_NUMBER : (INTEGER | FLOAT_NUMBER) 'i' ; // –ú–Ω–∏–º—ã–µ —á–∏—Å–ª–∞
